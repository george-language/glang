# file math.glang: math functions and objects

# close approximations of both E and Pi
stay math_pi = 3.141592653589793;
stay math_e = 2.718281828459045;

# convert degrees to radians
# returns the value of degrees converted to radians
func math_radians(degrees) {
    give degrees * (math_pi / 180.0);
}

# convert radians to degrees
# returns the value of radians converted to degrees
func math_degrees(radians) {
    give radians * (180.0 / math_pi);
}

# get absolute value
# returns the absolute value of 'x'
func math_abs(x) {
    if x >= 0 {
        give x;
    } otherwise {
        give -x;
    };
}

# get square root
# returns the square root of 'x'
func math_sqrt(x) {
    if x < 0 {
        uhoh("cannot compute square root of negative number");
    }

    give x ^ 0.5;
}

# bring x into range manually
# returns x in range [-pi, pi]
func math_wrap_pi(x) {
    # reduce to [-pi, pi]
    obj y = x;

    while y > math_pi {
        obj y = y - (2.0 * math_pi);
    }

    while y < -math_pi {
        obj y = y + (2.0 * math_pi);
    }

    give y;
}


# implemetation of sine trig function where x is in radians
# returns 'sin(x)'
func math_sin(x) {
    obj y = math_wrap_pi(x);

    obj y2 = y * y;
    obj y3 = y * y2;
    obj y5 = y3 * y2;
    obj y7 = y5 * y2;

    give y - (y3 / 6.0) + (y5 / 120.0) - (y7 / 5040.0);
}

# implemetation of cosine trig function where x is in radians
# returns 'cos(x)'
func math_cos(x) {
    obj y = math_wrap_pi(x);

    obj y2 = y * y;
    obj y4 = y2 * y2;
    obj y6 = y4 * y2;

    give 1.0 - (y2 / 2.0) + (y4 / 24.0) - (y6 / 720.0);
}

# implemetation of tangent trig function where x is in radians
# returns 'tan(x)' (raises an error if cos(x) = 0)
func math_tan(x) {
    obj c = math_cos(x);

    if c == 0.0 {
        uhoh("tan undefined for this x");
    };

    give math_sin(x) / c;
}
