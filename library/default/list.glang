# file list.glang: list operations in glang

# add a value to a list
# returns null
func push(list, value) {
    if type(list) != "list" {
        uhoh("expected type list");
    }

    give list * value;
}

# add two lists together (copy <list_b>'s objects into <list_a>)
# returns null
func append(list_a, list_b) {
    if type(list_a) != "list" {
        uhoh("argument 'list_a' must be type list");
    }

    if type(list_a) != "list" {
        uhoh("argument 'list_b' must be type list");
    }

    give list_a + list_b;
}

# remove the element at <index> in a list
# returns the removed value from the list
func remove(list, index) {
    if type(list) != "list" {
        uhoh("expected type list");
    }

    if type(index) != "number" {
        uhoh("argument 'index' must be type number");
    }

    give list - index;
}

# retrieve a value from a list
# returns the value at the retrieved index
func retrieve(list, index) {
    if type(list) != "list" {
        uhoh("expected type list");
    }

    if type(index) != "number" {
        uhoh("argument 'index' must be type number");
    }

    give list ^ index;
}

# reverse a list (supports the string type as well)
# returns null if reversing a list otherwise returns a copy of the string reversed
func reverse(list) {
    if type(list) == "list" or type(list) == "string" {
        skip;
    } otherwise {
        uhoh("expected type list or string");
    }

    give list ^ -1;
}

# clear a list (supports the string type as well)
# returns an empty version of the value
func clear(value) {
    if type(value) == "list" {
        give [];
    } alsoif type(value) == "string" {
        give "";
    } otherwise {
        uhoh("expected type list or string");
    }
}
