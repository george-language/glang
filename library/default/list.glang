# file list.glang: list operations in glang

# Add a value to a list object
# arg <list>: the list to push into
# arg <value>: the value to add into the list
# returns: a copy of the list with the new value inside
func push(list, value) {
    if type(list) != "list" {
        uhoh("expected type list in 'push'");
    }

    give list * value;
}

# Add two lists together
# arg <list_a>: first list to add
# arg <list_b>: second list to add
# returns: a new version of the two lists combined
func append(list_a, list_b) {
    if type(list_a) != "list" {
        uhoh("argument 'list_a' must be type list in 'append'");
    }

    if type(list_a) != "list" {
        uhoh("argument 'list_b' must be type list in 'append'");
    }

    give list_a + list_b;
}

# Remove a value from a list
# arg <list>: the list to remove the value from
# arg <index>: index to remove from the list
# returns: a new version of the list with the removed value
func remove(list, index) {
    if type(list) != "list" {
        uhoh("expected type list in 'remove'");
    }

    if type(index) != "number" {
        uhoh("argument 'index' must be type number in 'remove'");
    }

    give list - index;
}

# Retrieve a value from a list
# arg <list>: the list to retrieve the value from
# arg <index>: index to retrieve from the list
# returns: a copy of the value at the retrieved index
func retrieve(list, index) {
    if type(list) != "list" {
        uhoh("expected type list in 'retrieve'");
    }

    if type(index) != "number" {
        uhoh("argument 'index' must be type number in 'retrieve'");
    }

    give list ^ index;
}

# Reverse a list
# arg <list>: the list to reverse
# returns: a new version of the list with it's values reversed
func reverse(list) {
    if type(list) != "list" {
        uhoh("expected type list in 'reverse'");
    }

    give list ^ -1;
}
